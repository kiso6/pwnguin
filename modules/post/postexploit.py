import re
import subprocess
import random as rng
from time import sleep
from pymetasploit3.msfrpc import (
    MsfRpcClient,
    ExploitModule,
    PayloadModule,
    MeterpreterSession,
)
import ipaddress


def openCtrlSrv(bindaddr="0.0.0.0", show=True):
    """Open control and command server with random ports"""
    port = rng.randint(5000, 65535)
    cmd = "python3 -m http.server -d . -b " + bindaddr + " " + str(port)
    if show:
        print(cmd)
    proc = subprocess.Popen(
        cmd.split(" "), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
    )
    if proc:
        if show:
            print("Opened control server @ " + bindaddr + ":" + str(port))
        return (proc, port)
    else:
        print("Failed to open control server")
        exit(-500)


def scanNetwork(
    IP="192.168.1.0/24", minMask=16, shell: MeterpreterSession = None
) -> list:
    """Scan networks looking for hosts"""
    mask = int((IP.split(".")[-1]).split("/")[-1])
    if mask < minMask:
        print("Too many adresses to scan. Not scanned (Skipped by user).")
        return []
    else:
        if shell:
            shell.write("shell")
            sleep(1)
            shell.write(f"nmap -sn {IP} > ./output.txt &")
            sleep(1)
            s = "1"
            while s:
                shell.write("pgrep nmap")
                sleep(1)
                s = shell.read()
            shell.write("cat ./output.txt")
            sleep(1)
            result = shell.read()
            shell.write(">")
            sleep(1)
            return re.findall(r"(?:[0-9]{1,3}\.){3}[0-9]{1,3}", result)
        else:
            command = f"nmap -sn {IP}"
            proc = subprocess.run(command, shell=True, stdout=subprocess.PIPE)
            if proc:
                output = proc.stdout.decode("utf-8")
                return re.findall(r"(?:[0-9]{1,3}\.){3}[0-9]{1,3}", output)


def getTargetConnections(shell: MeterpreterSession = None) -> list:
    """Gather IPs from all interfaces"""
    if shell:
        shell.write("ifconfig")
        sleep(0.1)
        output = shell.read()
        interfaces = output.split("============")[1:]
        res = []
        for inter in interfaces:
            lines = inter.split("\n")
            infos = []
            for line in lines:
                if "Name" in line or "IPv4 Address" in line or "IPv4 Netmask" in line:
                    infos.append(line.split(":")[1].strip())
            if len(infos) == 3:
                res.append(
                    [
                        infos[0],
                        str(ipaddress.ip_interface(infos[1] + "/" + infos[2])),
                    ]
                )
        return res
    else:
        command = "ip -o -4 addr | grep '/' | awk '{print $2, $4}'"
        proc = subprocess.run(command, shell=True, stdout=subprocess.PIPE)
        if proc:
            networks = proc.stdout.decode("utf-8").strip("\n").split("\n")
            return [network.split(" ") for network in networks]


def getKnownARP(shell: MeterpreterSession = None) -> list:
    """Gather IPs/MACs from ARP table"""
    if shell:
        shell.write("arp")
        sleep(0.1)
        lines = [x.split() for x in shell.read().split("\n")[6:-2]]
        return [{"ip": x[0], "mac": x[1], "iface": x[2]} for x in lines]
    else:
        command = (
            "cat /proc/net/arp| grep -v '0x0' | tail -n +2 | awk '{print $1, $4, $6}'"
        )
        proc = subprocess.run(command, shell=True, stdout=subprocess.PIPE)
        if proc:
            lines = proc.stdout.decode("utf-8").strip("\n").split("\n")
            res = []
            for line in lines:
                x = line.split(" ")
                res.append({"ip": x[0], "mac": x[1], "iface": x[2]})
        return res


def getOS(shell: MeterpreterSession = None) -> str:
    """Get OS name, version and architecture"""
    if shell:
        shell.write("sysinfo")
        sleep(0.1)
        return "- " + "\n- ".join(shell.read().strip("\n").split("\n"))
    else:
        command = "cat /etc/os-release | grep '^PRETTY_NAME' | cut -d= -f2- | tr -d '\"'; cat /etc/os-release | grep '^VERSION_CODENAME' | cut -d= -f2- | tr -d '\"'; uname -m"
        proc = subprocess.run(command, shell=True, stdout=subprocess.PIPE)
        if proc:
            infos = proc.stdout.decode("utf-8").strip("\n").split("\n")
            return " ".join(infos)


def machine_to_rzo(ip_list=[]) -> list:
    """Utile tkt"""
    if len(ip_list) == 0:
        print("No ip in list.")
        return []
    return [str(ipaddress.ip_network(addr, strict=False)) for addr in ip_list]


# tab = machine_to_rzo(getTargetConnections())

# for ip in tab:
#     print(ip)
#     print(scanNetwork(ip))

# print(scanNetwork()
# (serv,port) =  openCtrlSrv("192.168.1.86")
